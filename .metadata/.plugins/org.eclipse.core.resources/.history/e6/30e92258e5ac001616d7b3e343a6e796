#include "sweep.h"

int degree;
int degrees = 180;
int objCount = 0;
int smallestLocation = 10000;
int smallestWidth = 10000;

void sweep() {
	move_servo(180);
	timer_waitMillis(1000);
	move_servo(0);

//    while(degrees>20) {
//        move_servo(degrees);
//        degrees -= 2;
//
//        int IRDist = ir_read();
//        int SonarDist = sonar_read();
//        SonarDist = SonarDist/10;
//
//        lcd_printf("%d", SonarDist);
//
//        if(SonarDist < 85) { // was if(SonarDist < 20 && SonarDist!=0)
//            handleObjectFound(SonarDist);
//        }
//
//        timer_waitMillis(500);
//    }
//
//    move_servo(smallestLocation);
//    timer_waitMillis(500);
}

void handleObjectFound(int distance) {
    unsigned int start = degrees;
    int IRDist = ir_read();
//    int distance = sonar_read()/10;

    while(IRDist > 600) { // was while(IRDist > 800)
        degrees -= 2;
        move_servo(degrees);
        timer_waitMillis(100);
        IRDist = ir_read();
    }
    unsigned int end = degrees;

    int radial_width = start-end;
    int real_width = radialToRealC(radial_width, distance);

    if(real_width>0) {
    	objCount ++;
        smallestWidth = real_width;
        smallestLocation = start;

        uart_sendStrNoNewline("WIDTH:");
        uart_sendNum(real_width);
        uart_sendStrNoNewline(";LOCATION:");
        uart_sendNum(start);
        uart_sendStrNoNewline(";DISTANCE:");
        uart_sendNum(distance);
        uart_sendStrNoNewline("\n");
    }
}

int radialToRealC(double radial_width, int distanceToObject) {
    double radians = toRadians(radial_width);
    return (int)(2*distanceToObject*sin(radians));
}

double toRadians(double angle) {
    return angle * ((double) M_PI / 180);
}


