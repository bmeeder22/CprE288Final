/*
 * main.c
 */
#include "api/WiFi.h"
#include "api/lcd.h"
#include "api/uart.h"
#include "api/Timer.h"
#include "api/servo.h"
#include "api/ir.h"
#include "api/sonar.h"
#include <string.h>
#include <math.h>

#define	M_PI		3.14159265358979323846

void init_all();
void handleCommand(char in);
void sweep();
void handleObjectFound();
int radialToRealC(double radial_width, int distanceToObject);
double toRadians(double angle);

int degree;
int degrees = 180;
int objCount = 0;
int smallestLocation = 10000;
int smallestWidth = 10000;

int main(void) {
	init_all();

	while(1){
		char in = uart_receive();
		handleCommand(in);
	}
}

void handleCommand(char in) {
	if(in == 'f') {
		lcd_printf("%s", "FORWARD");
		uart_sendStr("FORWARD\n");
	}
	if(in == 'b') {
		lcd_printf("%s", "BACKWARDS");
		uart_sendStr("BACKWARDS\n");
	}
	if(in == 'l') {
		lcd_printf("%s", "LEFT");
		uart_sendStr("LEFT\n");
	}
	if(in == 'r') {
		lcd_printf("%s", "RIGHT");
		uart_sendStr("RIGHT\n");
	}
	if(in == 's') {
		sweep();
		uart_sendStr("SWEEP\n");
	}
}

void sweep() {
    while(degrees>20) {
        move_servo(degrees);
        degrees -= 2;

        int IRDist = ir_read();
        int SonarDist = sonar_read();
        SonarDist = SonarDist/10;

        uart_sendNum(degrees);
        uart_sendStr("\t");
        uart_sendNum(IRDist);
        uart_sendStr("\t");
        uart_sendStr("\t");
        uart_sendNum(SonarDist);
        uart_sendStr("\n\r");

        if(IRDist > 500) { // was if(SonarDist < 20 && SonarDist!=0)
            handleObjectFound();
        }

        timer_waitMillis(500);
    }

    move_servo(smallestLocation);
    timer_waitMillis(500);
}

void handleObjectFound() {
    unsigned int start = degrees;
    int IRDist = ir_read();
    int distance = sonar_read()/10;

    while(IRDist > 600) { // was while(IRDist > 800)
        degrees -= 2;
        move_servo(degrees);
        timer_waitMillis(100);
        IRDist = ir_read();
    }
    unsigned int end = degrees;

    int radial_width = start-end;
    int real_width = radialToRealC(radial_width, distance);

    if(smallestWidth > real_width && real_width>0) {
    	objCount ++;
    	lcd_printf("Object Count: %d", objCount);
        smallestWidth = real_width;
        smallestLocation = start;
        uart_sendStr("WIDTH: ");
        uart_sendNum(real_width);
        uart_sendStr("\n\r");
    }
}

int radialToRealC(double radial_width, int distanceToObject) {
    double radians = toRadians(radial_width);
    return (int)(2*distanceToObject*sin(radians));
}

double toRadians(double angle) {
    return angle * ((double) M_PI / 180);
}

void init_all() {
	lcd_init();
	uart_init();

	//	WiFi_start("aaaaaaaa\0");
}
